package models

import (
    "time"
    "gorm.io/gorm"
)
// Main model struct
type {{.StructName}} struct {
    Id        uint           `json:"id" gorm:"primaryKey"`
    {{- range .Fields}}
    {{- if or (eq .Relationship "belongs_to") (eq .Relationship "belongsTo")}}
    {{.Name}}Id uint `json:"{{.JSONName}}" gorm:"column:{{.JSONName}};index"`
    {{.Name}} *{{.AssociatedType}} `json:"{{.DBName}},omitempty" gorm:"foreignKey:{{.Name}}Id;references:Id"`
    {{- else if or (eq .Relationship "has_one") (eq .Relationship "hasOne")}}
    {{.Name}} *{{.AssociatedType}} `json:"{{.JSONName}},omitempty" gorm:"foreignKey:{{$.StructName}}Id;references:Id"`
    {{- else if or (eq .Relationship "has_many") (eq .Relationship "hasMany")}}
    {{.Name}} []*{{.AssociatedType}} `json:"{{.JSONName}},omitempty" gorm:"foreignKey:{{$.StructName}}Id"`
    {{- else}}
    {{.Name}} {{.Type}} `json:"{{.JSONName}}" gorm:"column:{{.DBName}}{{if eq .Relationship "sort"}};default:0{{end}}"`
    {{- end}}
    {{- end}}
    CreatedAt time.Time      `json:"created_at"`
    UpdatedAt time.Time      `json:"updated_at"`
    DeletedAt gorm.DeletedAt `json:"deleted_at,omitempty" gorm:"index"`
}

// Base response for list views
type {{.StructName}}ListResponse struct {
    Id        uint           `json:"id"`
    {{- range .Fields}}
    {{- if not (or (eq .Relationship "has_many") (eq .Relationship "hasMany") (eq .Relationship "has_one") (eq .Relationship "hasOne"))}}
    {{.Name}} {{.Type}} `json:"{{.JSONName}}"`
    {{- end}}
    {{- if or (eq .Relationship "has_many") (eq .Relationship "hasMany")}}
    {{.Name}}Count int64 `json:"{{.JSONName}}_count"`
    {{- end}}
    {{- end}}
    CreatedAt time.Time      `json:"created_at"`
    UpdatedAt time.Time      `json:"updated_at"`
}

// Detailed response for single item views
type {{.StructName}}Response struct {
    Id        uint           `json:"id"`
    {{- range .Fields}}
    {{- if or (eq .Relationship "belongs_to") (eq .Relationship "belongsTo")}}
    {{.Name}}Id uint `json:"{{.JSONName}}"`
    {{.Name}} *{{.AssociatedType}}Response `json:"{{.JSONName}},omitempty"`
    {{- else if or (eq .Relationship "has_one") (eq .Relationship "hasOne")}}
    {{.Name}} *{{.AssociatedType}}Response `json:"{{.JSONName}},omitempty"`
    {{- else if or (eq .Relationship "has_many") (eq .Relationship "hasMany")}}
    {{.Name}}Count int64 `json:"{{.JSONName}}_count"`
    {{- else}}
    {{.Name}} {{.Type}} `json:"{{.JSONName}}"`
    {{- end}}
    {{- end}}
    CreatedAt time.Time      `json:"created_at"`
    UpdatedAt time.Time      `json:"updated_at"`
    DeletedAt gorm.DeletedAt `json:"deleted_at,omitempty"`
}

// Create request
type Create{{.StructName}}Request struct {
    {{- range .Fields}}
    {{- if or (eq .Relationship "belongs_to") (eq .Relationship "belongsTo")}}
    {{.Name}}Id uint `json:"{{.JSONName}}" binding:"required"`
    {{- else if ne (or (eq .Relationship "has_many") (eq .Relationship "hasMany") (eq .Relationship "has_one") (eq .Relationship "hasOne")) true }}
    {{.Name}} {{.Type}} `json:"{{.JSONName}}"{{if not (eq .Relationship "sort")}} binding:"required"{{end}}`
    {{- end}}
    {{- end}}
}

// Update request
type Update{{.StructName}}Request struct {
    {{- range .Fields}}
    {{- if or (eq .Relationship "belongs_to") (eq .Relationship "belongsTo")}}
    {{.Name}}Id *uint `json:"{{.JSONName}},omitempty"`
    {{- else if ne (or (eq .Relationship "has_many") (eq .Relationship "hasMany") (eq .Relationship "has_one") (eq .Relationship "hasOne")) true }}
    {{.Name}} *{{.Type}} `json:"{{.JSONName}},omitempty"`
    {{- end}}
    {{- end}}
}

func ({{.StructName}}) TableName() string {
    return "{{.TableName}}"
}

// Convert to list response (used in list views)
func (item *{{.StructName}}) ToListResponse() *{{.StructName}}ListResponse {
    if item == nil {
        return nil
    }

    response := &{{.StructName}}ListResponse{
        Id: item.Id,
        {{- range .Fields}}
        {{- if not (or (eq .Relationship "has_many") (eq .Relationship "hasMany") (eq .Relationship "has_one") (eq .Relationship "hasOne"))}}
        {{.Name}}: item.{{.Name}},
        {{- end}}
        {{- if or (eq .Relationship "has_many") (eq .Relationship "hasMany")}}
        {{.Name}}Count: int64(len(item.{{.Name}})),
        {{- end}}
        {{- end}}
        CreatedAt: item.CreatedAt,
        UpdatedAt: item.UpdatedAt,
    }
    return response
}

// Convert to detailed response (used in single item views)
func (item *{{.StructName}}) ToResponse() *{{.StructName}}Response {
    if item == nil {
        return nil
    }

    response := &{{.StructName}}Response{
        Id: item.Id,
        {{- range .Fields}}
        {{- if or (eq .Relationship "belongs_to") (eq .Relationship "belongsTo")}}
        {{.Name}}Id: item.{{.Name}}Id,
        {{.Name}}: item.{{.Name}}.ToResponse(),
        {{- else if or (eq .Relationship "has_one") (eq .Relationship "hasOne")}}
        {{.Name}}: item.{{.Name}}.ToResponse(),
        {{- else if or (eq .Relationship "has_many") (eq .Relationship "hasMany")}}
        {{.Name}}Count: int64(len(item.{{.Name}})),
        {{.Name}}: make([]{{.AssociatedType}}Response, 0),
        {{- else}}
        {{.Name}}: item.{{.Name}},
        {{- end}}
        {{- end}}
        CreatedAt: item.CreatedAt,
        UpdatedAt: item.UpdatedAt,
        DeletedAt: item.DeletedAt,
    }

    {{- range .Fields}}
    {{- if or (eq .Relationship "has_many") (eq .Relationship "hasMany")}}
    if item.{{.Name}} != nil {
        for _, v := range item.{{.Name}} {
            if v != nil {
                response.{{.Name}} = append(response.{{.Name}}, *v.ToResponse())
            }
        }
    }
    {{- end}}
    {{- end}}

    return response
}

func (item *{{.StructName}}) Preload(db *gorm.DB) *gorm.DB {
    {{- range .Fields}}
    {{- if or (eq .Relationship "belongs_to") (eq .Relationship "belongsTo") (eq .Relationship "has_one") (eq .Relationship "hasOne") (eq .Relationship "has_many") (eq .Relationship "hasMany")}}
    db = db.Preload("{{.Name}}")
    {{- end}}
    {{- end}}
    return db
}
