package models

import (
    "time"
    "gorm.io/gorm"
    "base/core/storage"
)

// {{.StructName}} represents a {{toLower .StructName}} entity
type {{.StructName}} struct {
    Id        uint           `json:"id" gorm:"primaryKey"`
    {{- range .Fields}}
    {{- if or (eq .Relationship "belongs_to") (eq .Relationship "belongsTo")}}
    {{.Name}}Id uint `json:"{{.JSONName}}_id_id" gorm:"column:{{.JSONName}}_id_id"`
    {{.Name}} *{{.AssociatedType}} `json:"{{.JSONName}}_id,omitempty" gorm:"foreignKey:{{.Name}}Id;references:Id"`
    {{- else if or (eq .Relationship "has_one") (eq .Relationship "hasOne")}}
    {{.Name}} *{{.AssociatedType}} `json:"{{.JSONName}},omitempty" gorm:"foreignKey:{{$.StructName}}Id;references:Id"`
    {{- else if or (eq .Relationship "has_many") (eq .Relationship "hasMany")}}
    {{.Name}} []*{{.AssociatedType}} `json:"{{.JSONName}},omitempty" gorm:"foreignKey:{{$.StructName}}Id"`
    {{- else if eq .Relationship "attachment"}}
    {{.Name}} *storage.Attachment `json:"{{.JSONName}},omitempty" gorm:"type:jsonb"`
    {{- else}}
    {{.Name}} {{.Type}} `json:"{{.JSONName}}" gorm:"column:{{.DBName}}{{if eq .Relationship "sort"}};default:0{{end}}"`
    {{- end}}
    {{- end}}
    CreatedAt time.Time      `json:"created_at"`
    UpdatedAt time.Time      `json:"updated_at"`
    DeletedAt gorm.DeletedAt `json:"deleted_at,omitempty" gorm:"index"`
}

// TableName returns the table name for the {{.StructName}} model
func ({{.StructName}}) TableName() string {
    return "{{toLower .PluralName}}"
}

// Implement the storage.Attachable interface
func (item *{{.StructName}}) GetId() uint {
    return item.Id
}

func (item *{{.StructName}}) GetModelName() string {
    return "{{toLower .StructName}}"
}

// {{.StructName}}ListResponse represents the list view response
type {{.StructName}}ListResponse struct {
    Id        uint      `json:"id"`
    {{- range .Fields}}
    {{- if or (eq .Relationship "belongs_to") (eq .Relationship "belongsTo")}}
    {{.Name}} *{{.AssociatedType}} `json:"{{.JSONName}}_id,omitempty"`
    {{- else if not (or (eq .Relationship "has_many") (eq .Relationship "hasMany") (eq .Relationship "has_one") (eq .Relationship "hasOne"))}}
    {{.Name}} {{.Type}} `json:"{{.JSONName}}{{if eq .Relationship "sort"}},omitempty{{end}}"`
    {{- end}}
    {{- end}}
    CreatedAt time.Time `json:"created_at"`
    UpdatedAt time.Time `json:"updated_at"`
}

// {{.StructName}}Response represents the detailed view response
type {{.StructName}}Response struct {
    Id        uint      `json:"id"`
    {{- range .Fields}}
    {{- if or (eq .Relationship "belongs_to") (eq .Relationship "belongsTo")}}
    {{.Name}}Id uint `json:"{{.JSONName}}_id_id"`
    {{.Name}} *{{.AssociatedType}}Response `json:"{{.JSONName}}_id,omitempty"`
    {{- else if or (eq .Relationship "has_many") (eq .Relationship "hasMany")}}
    {{.Name}} []*{{.AssociatedType}}Response `json:"{{.JSONName}},omitempty"`
    {{- else if or (eq .Relationship "has_one") (eq .Relationship "hasOne")}}
    {{.Name}} *{{.AssociatedType}}Response `json:"{{.JSONName}},omitempty"`
    {{- else}}
    {{.Name}} {{.Type}} `json:"{{.JSONName}}{{if eq .Relationship "sort"}},omitempty{{end}}"`
    {{- end}}
    {{- end}}
    CreatedAt time.Time      `json:"created_at"`
    UpdatedAt time.Time      `json:"updated_at"`
    DeletedAt gorm.DeletedAt `json:"deleted_at,omitempty"`
}

// Create{{.StructName}}Request represents the create request
type Create{{.StructName}}Request struct {
    {{- range .Fields}}
    {{- if not (or (eq .Relationship "has_many") (eq .Relationship "hasMany") (eq .Relationship "has_one") (eq .Relationship "hasOne"))}}
    {{- if or (eq .Relationship "belongs_to") (eq .Relationship "belongsTo")}}
    {{.Name}}Id uint `json:"{{.JSONName}}_id_id" binding:"required"`
    {{- else}}
    {{.Name}} {{.Type}} `json:"{{.JSONName}}" binding:"required"`
    {{- end}}
    {{- end}}
    {{- end}}
}

// Update{{.StructName}}Request represents the update request
type Update{{.StructName}}Request struct {
    {{- range .Fields}}
    {{- if not (or (eq .Relationship "has_many") (eq .Relationship "hasMany") (eq .Relationship "has_one") (eq .Relationship "hasOne"))}}
    {{- if or (eq .Relationship "belongs_to") (eq .Relationship "belongsTo")}}
    {{.Name}}Id *uint `json:"{{.JSONName}}_id_id,omitempty"`
    {{- else}}
    {{.Name}} *{{.Type}} `json:"{{.JSONName}},omitempty"`
    {{- end}}
    {{- end}}
    {{- end}}
}

// ToListResponse converts the model to a list response
func (item *{{.StructName}}) ToListResponse() *{{.StructName}}ListResponse {
    if item == nil {
        return nil
    }
    return &{{.StructName}}ListResponse{
        Id: item.Id,
        {{- range .Fields}}
        {{- if or (eq .Relationship "belongs_to") (eq .Relationship "belongsTo")}}
        {{.Name}}: item.{{.Name}},
        {{- else if not (or (eq .Relationship "has_many") (eq .Relationship "hasMany") (eq .Relationship "has_one") (eq .Relationship "hasOne"))}}
        {{.Name}}: item.{{.Name}},
        {{- end}}
        {{- end}}
        CreatedAt: item.CreatedAt,
        UpdatedAt: item.UpdatedAt,
    }
}

// ToResponse converts the model to a detailed response
func (item *{{.StructName}}) ToResponse() *{{.StructName}}Response {
    if item == nil {
        return nil
    }
    return &{{.StructName}}Response{
        Id: item.Id,
        {{- range .Fields}}
        {{- if or (eq .Relationship "belongs_to") (eq .Relationship "belongsTo")}}
        {{.Name}}Id: item.{{.Name}}Id,
        {{.Name}}: func() *{{.AssociatedType}}Response {
            if item.{{.Name}} == nil {
                return nil
            }
            return item.{{.Name}}.ToResponse()
        }(),
        {{- else if or (eq .Relationship "has_one") (eq .Relationship "hasOne")}}
        {{.Name}}: func() *{{.AssociatedType}}Response {
            if item.{{.Name}} == nil {
                return nil
            }
            return item.{{.Name}}.ToResponse()
        }(),
        {{- else if or (eq .Relationship "has_many") (eq .Relationship "hasMany")}}
        {{.Name}}: func() []*{{.AssociatedType}}Response {
            if item.{{.Name}} == nil {
                return nil
            }
            responses := make([]*{{.AssociatedType}}Response, len(item.{{.Name}}))
            for i, v := range item.{{.Name}} {
                responses[i] = v.ToResponse()
            }
            return responses
        }(),
        {{- else}}
        {{.Name}}: item.{{.Name}},
        {{- end}}
        {{- end}}
        CreatedAt: item.CreatedAt,
        UpdatedAt: item.UpdatedAt,
        DeletedAt: item.DeletedAt,
    }
}

func (item *{{.StructName}}) Preload(db *gorm.DB) *gorm.DB {
    {{- range .Fields}}
    {{- if or (eq .Relationship "belongs_to") (eq .Relationship "belongsTo")}}
    db = db.Preload("{{.Name}}")
    {{- else if or (eq .Relationship "has_one") (eq .Relationship "hasOne")}}
    db = db.Preload("{{.Name}}")
    {{- else if or (eq .Relationship "has_many") (eq .Relationship "hasMany")}}
    db = db.Preload("{{.Name}}")
    {{- end}}
    {{- end}}
    return db
}
