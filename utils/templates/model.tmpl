package models

import (
    "time"{{if hasFileField .Fields}}
    "base/core/storage"{{end}}
    "gorm.io/gorm"
)
// {{.StructName}} represents a {{.StructName}} entity
type {{.StructName}} struct {
    Id        uint           `json:"id" gorm:"primaryKey;auto_increment"`
    {{- range .Fields}}
    {{- if isFileField .}}
    {{.Name}} *storage.Attachment `json:"{{.JSONName}}" gorm:"foreignKey:ModelId;references:Id"`
    {{- else if isRelationshipField . "belongs_to"}}
    {{.Name}}Id uint `json:"{{.JSONName}}" gorm:"column:{{.DBName}}_id;index"`
    {{.Name}} *{{.AssociatedType}} `json:"{{.DBName}},omitempty" gorm:"foreignKey:{{.Name}}Id;references:Id"`
    {{- else if isRelationshipField . "has_one"}}
    {{.Name}}Id uint `json:"{{.JSONName}}" gorm:"column:{{.DBName}}_id;index"`
    {{.Name}} *{{.AssociatedType}} `json:"{{.JSONName}},omitempty" gorm:"foreignKey:{{.Name}}Id;references:Id"`
    {{- else if isRelationshipField . "has_many"}}
    {{.Name}} []*{{.AssociatedType}} `json:"{{.JSONName}},omitempty" gorm:"many2many:{{$.TableName}}_{{.DBName}};"`
    {{- else}}
    {{.Name}} {{.Type}} `json:"{{.JSONName}}" gorm:"column:{{.JSONName}}{{if eq .Relationship "sort"}};default:0{{end}}"`
    {{- end}}
    {{- end}}
    CreatedAt time.Time      `json:"created_at" gorm:"column:created_at"`
    UpdatedAt time.Time      `json:"updated_at" gorm:"column:updated_at"`
    DeletedAt gorm.DeletedAt `json:"deleted_at,omitempty" gorm:"column:deleted_at;index"`
}

// {{.StructName}}Response represents the API response structure
type {{.StructName}}Response struct {
    Id        uint           `json:"id"`
    {{- range .Fields}}
    {{- if isFileField .}}
    {{.Name}} *storage.Attachment `json:"{{.JSONName}},omitempty"`
    {{- else if isRelationshipField . "belongs_to"}}
    {{.Name}}Id uint `json:"{{.JSONName}}"`
    {{.Name}} *{{.AssociatedType}}Response `json:"{{.DBName}},omitempty"`
    {{- else if isRelationshipField . "has_one"}}
    {{.Name}}Id uint `json:"{{.JSONName}}"`
    {{.Name}} *{{.AssociatedType}}Response `json:"{{.JSONName}},omitempty"`
    {{- else if isRelationshipField . "has_many"}}
    {{.Name}} []{{.AssociatedType}}Response `json:"{{.JSONName}},omitempty"`
    {{- else}}
    {{.Name}} {{.Type}} `json:"{{.JSONName}}"`
    {{- end}}
    {{- end}}
    CreatedAt time.Time      `json:"created_at"`
    UpdatedAt time.Time      `json:"updated_at"`
    DeletedAt gorm.DeletedAt `json:"deleted_at,omitempty"`
}

// Create{{.StructName}}Request represents the creation request
type Create{{.StructName}}Request struct {
    {{- range .Fields}}
    {{- if isFileField .}}
    // @Description File upload field
    {{.Name}} *storage.Attachment `json:"{{.JSONName}},omitempty"`
    {{- else if isRelationshipField . "belongs_to"}}
    {{.Name}}Id uint `form:"{{.JSONName}}" binding:"required"`
    {{- else if isRelationshipField . "has_one"}}
    {{.Name}}Id uint `form:"{{.JSONName}}" binding:"required"`
    {{- else if not (isRelationshipField . "has_many")}}
    {{.Name}} {{.Type}} `form:"{{.JSONName}}" binding:"required"`
    {{- end}}
    {{- end}}
}

// Update{{.StructName}}Request represents the update request
type Update{{.StructName}}Request struct {
    {{- range .Fields}}
    {{- if isFileField .}}
    {{.Name}} *storage.Attachment `json:"{{.JSONName}},omitempty"`
    {{- else if isRelationshipField . "belongs_to"}}
    {{.Name}}Id *uint `form:"{{.JSONName}}"`
    {{- else if isRelationshipField . "has_one"}}
    {{.Name}}Id *uint `form:"{{.JSONName}}"`
    {{- else if not (isRelationshipField . "has_many")}}
    {{.Name}} *{{.Type}} `form:"{{.JSONName}}"`
    {{- end}}
    {{- end}}
}

// TableName specifies the table name for the model
func ({{.StructName}}) TableName() string {
    return "{{.TableName}}"
}

// Implement the Attachable interface
func (m *{{.StructName}}) GetId() uint {
    return m.Id
}

func (m *{{.StructName}}) GetModelName() string {
    return "{{.TableName}}"
}

// Convert to response
func (item *{{.StructName}}) ToResponse() *{{.StructName}}Response {
    if item == nil {
        return nil
    }

    response := &{{.StructName}}Response{
        Id: item.Id,
        {{- range .Fields}}
        {{- if or (eq .Type "file") (eq .Type "image") (eq .Type "attachment") }}
        {{.Name}}: item.{{.Name}},
        {{- else if or (eq .Relationship "belongs_to") (eq .Relationship "belongsTo")}}
        {{.Name}}Id: item.{{.Name}}Id,
        {{- else if or (eq .Relationship "has_one") (eq .Relationship "hasOne")}}
        {{.Name}}Id: item.{{.Name}}Id,
        {{- else}}
        {{.Name}}: item.{{.Name}},
        {{- end}}
        {{- end}}
        CreatedAt: item.CreatedAt,
        UpdatedAt: item.UpdatedAt,
        DeletedAt: item.DeletedAt,
    }

    {{- range .Fields}}
    {{- if or (eq .Relationship "belongs_to") (eq .Relationship "belongsTo")}}
    if item.{{.Name}} != nil {
        response.{{.Name}} = item.{{.Name}}.ToResponse()
    }
    {{- else if or (eq .Relationship "has_one") (eq .Relationship "hasOne")}}
    if item.{{.Name}} != nil {
        response.{{.Name}} = item.{{.Name}}.ToResponse()
    }
    {{- else if or (eq .Relationship "has_many") (eq .Relationship "hasMany")}}
    if item.{{.Name}} != nil {
        response.{{.Name}} = make([]{{.AssociatedType}}Response, len(item.{{.Name}}))
        for i, v := range item.{{.Name}} {
            if v != nil {
                response.{{.Name}}[i] = *v.ToResponse()
            }
        }
    }
    {{- end}}
    {{- end}}

    return response
}

// Preload loads all the associated data
func (item *{{.StructName}}) Preload(db *gorm.DB) *gorm.DB {
    {{- range .Fields}}
    {{- if or (eq .Relationship "belongs_to") (eq .Relationship "belongsTo") (eq .Relationship "has_one") (eq .Relationship "hasOne") (eq .Relationship "has_many") (eq .Relationship "hasMany") (eq .Type "file") (eq .Type "image") (eq .Type "attachment")}}
    db = db.Preload("{{.Name}}")
    {{- end}}
    {{- end}}
    return db
}

// BeforeCreate hook
func (item *{{.StructName}}) BeforeCreate(tx *gorm.DB) error {
    {{range .Fields}}
    {{if eq .Relationship "sort"}}
    if item.{{.Name}} == 0 {
        var maxOrder int
        if err := tx.Model(&{{$.StructName}}{}).Select("COALESCE(MAX({{.DBName}}), -1)").Scan(&maxOrder).Error; err != nil {
            return err
        }
        item.{{.Name}} = maxOrder + 1
    }
    {{end}}
    {{end}}
    return nil
}

// AfterDelete hook
func (item *{{.StructName}}) AfterDelete(tx *gorm.DB) error {
    {{range .Fields}}
    {{if or (eq .Type "file") (eq .Type "image") (eq .Type "attachment")}}
    if item.{{.Name}} != nil {
        if err := tx.Delete(item.{{.Name}}).Error; err != nil {
            return err
        }
    }
    {{end}}
    {{end}}
    return nil
}
