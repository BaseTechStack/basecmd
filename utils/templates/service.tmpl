package {{.PackageName}}

import (
    "errors"
    "gorm.io/gorm"
    "gorm.io/gorm/clause"
    "base/app/models"
)

type {{.StructName}}Service struct {
    DB *gorm.DB
}

func New{{.StructName}}Service(db *gorm.DB) *{{.StructName}}Service {
    return &{{.StructName}}Service{
        DB: db,
    }
}

func (s *{{.StructName}}Service) Create(req *models.Create{{.StructName}}Request) (*models.{{.StructName}}, error) {
    item := models.{{.StructName}}{
        {{- range .Fields}}
        {{- if or (eq .Relationship "belongs_to") (eq .Relationship "has_one")}}
        {{.Name}}ID: req.{{.Name}}ID,
        {{- else if ne .Relationship "has_many"}}
        {{.Name}}: req.{{.Name}},
        {{- end}}
        {{- end}}
    }
    if err := s.DB.Create(&item).Error; err != nil {
        return nil, err
    }
    return s.GetByID(item.ID)
}

func (s *{{.StructName}}Service) Update(id uint, req *models.Update{{.StructName}}Request) (*models.{{.StructName}}, error) {
    item, err := s.GetByID(id)
    if err != nil {
        return nil, err
    }
    {{- range .Fields}}
    {{- if or (eq .Relationship "belongs_to") (eq .Relationship "has_one")}}
    if req.{{.Name}}ID != nil {
        item.{{.Name}}ID = *req.{{.Name}}ID
    }
    {{- else if ne .Relationship "has_many"}}
    if req.{{.Name}} != nil {
        item.{{.Name}} = *req.{{.Name}}
    }
    {{- end}}
    {{- end}}
    if err := s.DB.Save(item).Error; err != nil {
        return nil, err
    }
    return s.GetByID(id)
}

func (s *{{.StructName}}Service) GetByID(id uint) (*models.{{.StructName}}, error) {
    var item models.{{.StructName}}
    if err := s.DB.Preload(clause.Associations).First(&item, id).Error; err != nil {
        return nil, err
    }
    return &item, nil
}

func (s *{{.StructName}}Service) GetAll() ([]*models.{{.StructName}}, error) {
    var items []*models.{{.StructName}}
    if err := s.DB.Preload(clause.Associations).Find(&items).Error; err != nil {
        return nil, err
    }
    return items, nil
}

func (s *{{.StructName}}Service) Delete(id uint) error {
    result := s.DB.Delete(&models.{{.StructName}}{}, id)
    if result.Error != nil {
        return result.Error
    }
    if result.RowsAffected == 0 {
        return errors.New("item not found")
    }
    return nil
}

func (s *{{.StructName}}Service) GetAssociated(id uint, associationName string) (interface{}, error) {
    item, err := s.GetByID(id)
    if err != nil {
        return nil, err
    }

    var associated interface{}
    if err := s.DB.Model(item).Association(associationName).Find(&associated); err != nil {
        return nil, err
    }

    return associated, nil
}
