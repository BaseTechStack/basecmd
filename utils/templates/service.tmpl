package {{.PackageName}}{{$stringFieldExists := false}}{{$hasFileField := hasFileField .Fields}}
{{range .Fields}}{{if or (eq .Type "string") (eq .Type "text")}}{{$stringFieldExists = true}}{{end}}{{end}}

import (
    "errors"
    "math"
    {{if $stringFieldExists}}
    "strings"
    {{end}}
    "go.uber.org/zap"
    {{if $hasFileField}}
    "mime/multipart"
    "base/core/storage"
    {{end}}
    "gorm.io/gorm"
    "gorm.io/gorm/clause"
    "base/app/models"
    "base/core/types"
)

type {{.StructName}}Service struct {
    DB *gorm.DB
    Logger *zap.Logger
    {{if $hasFileField}}
    ActiveStorage *storage.ActiveStorage
    {{end}}
}

func New{{.StructName}}Service(
    db *gorm.DB,
    logger *zap.Logger,
    {{if $hasFileField}}
    activeStorage *storage.ActiveStorage,
    {{end}}
) *{{.StructName}}Service {
    return &{{.StructName}}Service{
        DB: db,
        Logger: logger,
        {{if $hasFileField}}
        ActiveStorage: activeStorage,
        {{end}}
    }
}

// CRUD Methods
func (s *{{.StructName}}Service) Create(req *models.Create{{.StructName}}Request) (*models.{{.StructName}}, error) {
    item := models.{{.StructName}}{
        {{- range .Fields}}
        {{- if or (eq .Relationship "belongs_to") (eq .Relationship "belongsTo")}}
        {{.Name}}Id: req.{{.Name}}Id,
        {{- else if or (eq .Relationship "has_one") (eq .Relationship "hasOne")}}
        {{.Name}}Id: req.{{.Name}}Id,
        {{- else if ne .Relationship "has_many"}}
        {{.Name}}: req.{{.Name}},
        {{- end}}
        {{- end}}
    }
    {{range .Fields}}{{if eq .Relationship "sort"}}
    if item.{{.Name}} == 0 {
        var maxOrder int
        if err := s.DB.Model(&models.{{$.StructName}}{}).Select("COALESCE(MAX({{.DBName}}), -1)").Scan(&maxOrder).Error; err != nil {
            s.Logger.Error("failed to get max order for sorting",
                zap.Error(err),
                zap.String("model", "{{$.StructName}}"))
            return nil, err
        }
        item.{{.Name}} = maxOrder + 1
    }{{end}}{{end}}

    if err := s.DB.Create(&item).Error; err != nil {
        s.Logger.Error("failed to create {{.StructName}}",
            zap.Error(err),
            zap.Any("request", req))
        return nil, err
    }

    s.Logger.Info("created {{.StructName}}", zap.Uint("id", item.Id))
    return s.GetById(item.Id)
}

func (s *{{.StructName}}Service) GetById(id uint) (*models.{{.StructName}}, error) {
    var item models.{{.StructName}}
    if err := s.DB.Preload(clause.Associations).First(&item, id).Error; err != nil {
        s.Logger.Error("failed to get {{.StructName}} by id",
            zap.Error(err),
            zap.Uint("id", id))
        return nil, err
    }
    return &item, nil
}

func (s *{{.StructName}}Service) Update(id uint, req *models.Update{{.StructName}}Request) (*models.{{.StructName}}, error) {
    if err := s.DB.First(&models.{{.StructName}}{}, id).Error; err != nil {
        s.Logger.Error("failed to find {{.StructName}} for update",
            zap.Error(err),
            zap.Uint("id", id))
        return nil, err
    }

    updates := make(map[string]interface{})
    {{- range .Fields}}
    {{- if or (eq .Relationship "belongs_to") (eq .Relationship "belongsTo")}}
    if req.{{.Name}}Id != nil {
        updates["{{.DBName}}_id"] = *req.{{.Name}}Id
    }
    {{- else if or (eq .Relationship "has_one") (eq .Relationship "hasOne")}}
    if req.{{.Name}}Id != nil {
        updates["{{.DBName}}_id"] = *req.{{.Name}}Id
    }
    {{- else if and (ne .Relationship "has_many") (ne .Type "file") (ne .Type "image") (ne .Type "attachment")}}
    if req.{{.Name}} != nil {
        updates["{{.DBName}}"] = *req.{{.Name}}
    }
    {{- end}}
    {{- end}}

    if err := s.DB.Model(&models.{{.StructName}}{}).Where("id = ?", id).Updates(updates).Error; err != nil {
        s.Logger.Error("failed to update {{.StructName}}",
            zap.Error(err),
            zap.Uint("id", id),
            zap.Any("updates", updates))
        return nil, err
    }

    s.Logger.Info("updated {{.StructName}}",
        zap.Uint("id", id),
        zap.Any("updates", updates))
    return s.GetById(id)
}

func (s *{{.StructName}}Service) Delete(id uint) error {
    result := s.DB.Delete(&models.{{.StructName}}{}, id)
    if result.Error != nil {
        s.Logger.Error("failed to delete {{.StructName}}",
            zap.Error(result.Error),
            zap.Uint("id", id))
        return result.Error
    }
    if result.RowsAffected == 0 {
        s.Logger.Warn("{{.StructName}} not found for deletion",
            zap.Uint("id", id))
        return errors.New("item not found")
    }

    s.Logger.Info("deleted {{.StructName}}", zap.Uint("id", id))
    return nil
}

func (s *{{.StructName}}Service) GetAll(page *int, limit *int, search *string) (*types.PaginatedResponse, error) {
    query := s.DB.Model(&models.{{.StructName}}{})
    {{if $stringFieldExists}}
    if search != nil && *search != "" {
        searchQuery := "%" + *search + "%"
        var conditions []string
        var params []interface{}
        {{- range .Fields}}
        {{- if or (eq .Type "string") (eq .Type "text")}}
        conditions = append(conditions, "{{.DBName}} LIKE ?")
        params = append(params, searchQuery)
        {{- end}}
        {{- end}}

        if len(conditions) > 0 {
            whereClause := strings.Join(conditions, " OR ")
            query = query.Where(whereClause, params...)
        }
    }{{end}}
    {{range .Fields}}{{if eq .Relationship "sort"}}
    query = query.Order("{{.DBName}} asc")
    {{end}}{{end}}

    if page != nil && limit != nil {
        var total int64
        if err := query.Count(&total).Error; err != nil {
            s.Logger.Error("failed to count total {{.StructName}} records",
                zap.Error(err))
            return nil, err
        }

        offset := (*page - 1) * *limit
        totalPages := int(math.Ceil(float64(total) / float64(*limit)))

        var items []models.{{.StructName}}
        if err := query.Preload(clause.Associations).Limit(*limit).Offset(offset).Find(&items).Error; err != nil {
            s.Logger.Error("failed to fetch paginated {{.StructName}} records",
                zap.Error(err),
                zap.Int("page", *page),
                zap.Int("limit", *limit))
            return nil, err
        }

        responses := make([]models.{{.StructName}}Response, len(items))
        for i, item := range items {
            responses[i] = *item.ToResponse()
        }

        return &types.PaginatedResponse{
            Data: responses,
            Pagination: types.Pagination{
                Total:      total,
                Page:       *page,
                PageSize:   *limit,
                TotalPages: totalPages,
            },
        }, nil
    }

    var allItems []models.{{.StructName}}
    if err := query.Preload(clause.Associations).Find(&allItems).Error; err != nil {
        s.Logger.Error("failed to fetch all {{.StructName}} records",
            zap.Error(err))
        return nil, err
    }

    responses := make([]models.{{.StructName}}Response, len(allItems))
    for i, item := range allItems {
        responses[i] = *item.ToResponse()
    }

    return &types.PaginatedResponse{
        Data: responses,
        Pagination: types.Pagination{
            Total:      int64(len(allItems)),
            Page:       1,
            PageSize:   len(allItems),
            TotalPages: 1,
        },
    }, nil
}

{{range .Fields}}
{{if isFileField .}}
// File handling methods
func (s *{{$.StructName}}Service) Update{{.Name}}(id uint, file *multipart.FileHeader) (*models.{{$.StructName}}, error) {
    tx := s.DB.Begin()
    defer func() {
        if r := recover(); r != nil {
            tx.Rollback()
        }
    }()

    var item models.{{$.StructName}}
    if err := tx.Preload("{{.Name}}").First(&item, id).Error; err != nil {
        tx.Rollback()
        s.Logger.Error("failed to find {{$.StructName}} for {{.Name}} update",
            zap.Error(err),
            zap.Uint("id", id))
        return nil, err
    }

    if item.{{.Name}} != nil {
        if err := s.ActiveStorage.Delete(item.{{.Name}}); err != nil {
            tx.Rollback()
            s.Logger.Error("failed to delete existing {{.Name}}",
                zap.Error(err),
                zap.Uint("id", id),
                zap.Any("attachment", item.{{.Name}}))
            return nil, err
        }
    }

    attachment, err := s.ActiveStorage.Attach(&item, "{{.JSONName}}", file)
    if err != nil {
        tx.Rollback()
        s.Logger.Error("failed to upload {{.Name}}",
            zap.Error(err),
            zap.Uint("id", id),
            zap.String("filename", file.Filename))
        return nil, err
    }

    item.{{.Name}} = attachment
    if err := tx.Save(&item).Error; err != nil {
        tx.Rollback()
        s.Logger.Error("failed to save {{$.StructName}} with new {{.Name}}",
            zap.Error(err),
            zap.Uint("id", id))
        return nil, err
    }

    if err := tx.Commit().Error; err != nil {
        s.Logger.Error("failed to commit transaction",
            zap.Error(err),
            zap.Uint("id", id))
        return nil, err
    }

    s.Logger.Info("updated {{.Name}} for {{$.StructName}}",
        zap.Uint("id", id),
        zap.String("filename", file.Filename))
    return s.GetById(id)
}

func (s *{{$.StructName}}Service) Delete{{.Name}}(id uint) error {
    tx := s.DB.Begin()
    defer func() {
        if r := recover(); r != nil {
            tx.Rollback()
        }
    }()

    var item models.{{$.StructName}}
    if err := tx.Preload("{{.Name}}").First(&item, id).Error; err != nil {
        tx.Rollback()
        s.Logger.Error("failed to find {{$.StructName}} for {{.Name}} deletion",
            zap.Error(err),
            zap.Uint("id", id))
        return err
    }

    if item.{{.Name}} != nil {
        if err := s.ActiveStorage.Delete(item.{{.Name}}); err != nil {
            tx.Rollback()
            s.Logger.Error("failed to delete {{.Name}}",
                zap.Error(err),
                zap.Uint("id", id),
                zap.Any("attachment", item.{{.Name}}))
            return err
        }

        item.{{.Name}} = nil
        if err := tx.Save(&item).Error; err != nil {
            tx.Rollback()
            s.Logger.Error("failed to update {{$.StructName}} after deleting {{.Name}}",
                zap.Error(err),
                zap.Uint("id", id))
            return err
        }
    }

    if err := tx.Commit().Error; err != nil {
        s.Logger.Error("failed to commit transaction",
            zap.Error(err),
            zap.Uint("id", id))
        return err
    }

    s.Logger.Info("deleted {{.Name}} from {{$.StructName}}",
        zap.Uint("id", id))
    return nil
}
{{end}}
{{end}}

{{range .Fields}}
{{if eq .Relationship "sort"}}
// Sort methods
func (s *{{$.StructName}}Service) GetSorted() ([]*models.{{$.StructName}}, error) {
    var items []*models.{{$.StructName}}
    if err := s.DB.Preload(clause.Associations).Order("{{.DBName}} asc").Find(&items).Error; err != nil {
        s.Logger.Error("failed to get sorted {{$.StructName}} list",
            zap.Error(err))
        return nil, err
    }
    return items, nil
}

func (s *{{$.StructName}}Service) UpdateSort(sortedIds []uint) error {
    return s.DB.Transaction(func(tx *gorm.DB) error {
        for order, id := range sortedIds {
            if err := tx.Model(&models.{{$.StructName}}{}).Where("id = ?", id).Update("{{.DBName}}", order).Error; err != nil {
                s.Logger.Error("failed to update {{$.StructName}} sort order",
                    zap.Error(err),
                    zap.Uint("id", id),
                    zap.Int("order", order))
                return err
            }
        }

        s.Logger.Info("updated {{$.StructName}} sort order",
            zap.Any("sorted_ids", sortedIds))
        return nil
    })
}
{{end}}
{{end}}

{{range .Fields}}
{{if or (eq .Relationship "has_many") (eq .Relationship "hasMany")}}
// Relationship methods
func (s *{{$.StructName}}Service) Get{{.Name}}(id uint) ([]*models.{{.AssociatedType}}, error) {
    item, err := s.GetById(id)
    if err != nil {
        s.Logger.Error("failed to get {{$.StructName}} for {{.Name}} relationship",
            zap.Error(err),
            zap.Uint("id", id))
        return nil, err
    }

    var associated []*models.{{.AssociatedType}}
    if err := s.DB.Model(item).Association("{{.Name}}").Find(&associated); err != nil {
        s.Logger.Error("failed to get {{.Name}} for {{$.StructName}}",
            zap.Error(err),
            zap.Uint("id", id))
        return nil, err
    }

    s.Logger.Debug("retrieved {{.Name}} for {{$.StructName}}",
        zap.Uint("id", id),
        zap.Int("count", len(associated)))
    return associated, nil
}

func (s *{{$.StructName}}Service) Add{{.Name}}(id uint, relatedIds []uint) error {
    tx := s.DB.Begin()
    defer func() {
        if r := recover(); r != nil {
            tx.Rollback()
        }
    }()

    var item models.{{$.StructName}}
    if err := tx.First(&item, id).Error; err != nil {
        tx.Rollback()
        s.Logger.Error("failed to find {{$.StructName}} for adding {{.Name}}",
            zap.Error(err),
            zap.Uint("id", id))
        return err
    }

    var relatedItems []*models.{{.AssociatedType}}
    if err := tx.Find(&relatedItems, relatedIds).Error; err != nil {
        tx.Rollback()
        s.Logger.Error("failed to find related {{.AssociatedType}} items",
            zap.Error(err),
            zap.Uints("related_ids", relatedIds))
        return err
    }

    if err := tx.Model(&item).Association("{{.Name}}").Append(relatedItems); err != nil {
        tx.Rollback()
        s.Logger.Error("failed to add {{.Name}} to {{$.StructName}}",
            zap.Error(err),
            zap.Uint("id", id),
            zap.Uints("related_ids", relatedIds))
        return err
    }

    if err := tx.Commit().Error; err != nil {
        s.Logger.Error("failed to commit transaction",
            zap.Error(err),
            zap.Uint("id", id))
        return err
    }

    s.Logger.Info("added {{.Name}} to {{$.StructName}}",
        zap.Uint("id", id),
        zap.Uints("related_ids", relatedIds))
    return nil
}

func (s *{{$.StructName}}Service) Remove{{.Name}}(id uint, relatedIds []uint) error {
    tx := s.DB.Begin()
    defer func() {
        if r := recover(); r != nil {
            tx.Rollback()
        }
    }()

    var item models.{{$.StructName}}
    if err := tx.First(&item, id).Error; err != nil {
        tx.Rollback()
        s.Logger.Error("failed to find {{$.StructName}} for removing {{.Name}}",
            zap.Error(err),
            zap.Uint("id", id))
        return err
    }

    var relatedItems []*models.{{.AssociatedType}}
    if err := tx.Find(&relatedItems, relatedIds).Error; err != nil {
        tx.Rollback()
        s.Logger.Error("failed to find related {{.AssociatedType}} items",
            zap.Error(err),
            zap.Uints("related_ids", relatedIds))
        return err
    }

    if err := tx.Model(&item).Association("{{.Name}}").Delete(relatedItems); err != nil {
        tx.Rollback()
        s.Logger.Error("failed to remove {{.Name}} from {{$.StructName}}",
            zap.Error(err),
            zap.Uint("id", id),
            zap.Uints("related_ids", relatedIds))
        return err
    }

    if err := tx.Commit().Error; err != nil {
        s.Logger.Error("failed to commit transaction",
            zap.Error(err),
            zap.Uint("id", id))
        return err
    }

    s.Logger.Info("removed {{.Name}} from {{$.StructName}}",
        zap.Uint("id", id),
        zap.Uints("related_ids", relatedIds))
    return nil
}
{{end}}
{{end}}
