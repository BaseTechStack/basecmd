package {{.PackageName}}

import (
    "base/core/module"
    "base/app/models"
    "base/core/emitter"
    "base/core/logger"

    "github.com/gin-gonic/gin"
    "gorm.io/gorm"
)

type {{.StructName}}Module struct {
    module.DefaultModule
    DB         *gorm.DB
    Controller *{{.StructName}}Controller
    Service    *{{.StructName}}Service
    Logger     logger.Logger
    Emitter    *emitter.Emitter
}

func New{{.StructName}}Module(db *gorm.DB, router *gin.RouterGroup, log logger.Logger, emitter *emitter.Emitter) module.Module {
    service := New{{.StructName}}Service(db, emitter, log)
    controller := New{{.StructName}}Controller(service)

    {{.PackageName}}Module := &{{.StructName}}Module{
        DB:         db,
        Controller: controller,
        Service:    service,
        Logger:     log,
        Emitter:    emitter,
    }

    {{.PackageName}}Module.Routes(router)
    {{.PackageName}}Module.Migrate()

    log.Info("initialized {{.StructName}} module")

    return {{.PackageName}}Module
}

func (m *{{.StructName}}Module) Routes(router *gin.RouterGroup) {
    m.Logger.Info("setting up {{.StructName}} routes")
    m.Controller.Routes(router)
}

func (m *{{.StructName}}Module) Migrate() error {
    m.Logger.Info("running {{.StructName}} migrations")
    return m.DB.AutoMigrate(&models.{{.StructName}}{})
}

func (m *{{.StructName}}Module) GetModels() []interface{} {
    return []interface{}{&models.{{.StructName}}{}}
}