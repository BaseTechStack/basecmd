package {{.PackageName}}

import (
	"net/http"
	"strconv"

	"github.com/gin-gonic/gin"
	"base/app/models"
)

type {{.StructName}}Controller struct {
    {{.StructName}}Service *{{.StructName}}Service
}

func New{{.StructName}}Controller(service *{{.StructName}}Service) *{{.StructName}}Controller {
    return &{{.StructName}}Controller{
        {{.StructName}}Service: service,
    }
}

func (c *{{.StructName}}Controller) Routes(router *gin.RouterGroup) {
    router.GET("/{{.RouteName}}", c.List)       // Paginated list
    router.GET("/{{.RouteName}}/all", c.ListAll) // Unpaginated list
    router.GET("/{{.RouteName}}/:id", c.Get)
    router.POST("/{{.RouteName}}", c.Create)
    router.PUT("/{{.RouteName}}/:id", c.Update)
    router.DELETE("/{{.RouteName}}/:id", c.Delete)
    
    {{- range .Fields}}
    {{- if or (eq .Relationship "has_many") (eq .Relationship "hasMany")}}
    router.GET("/{{$.RouteName}}/:id/{{.PluralType}}", c.GetAssociated{{.Name}})
    {{- end}}
    {{- if or (eq .Relationship "has_one") (eq .Relationship "hasOne")}}
    router.GET("/{{$.RouteName}}/:id/{{.JSONName}}", c.GetAssociated{{.Name}})
    {{- end}}
    {{- end}}
}

// Create method
func (c *{{.StructName}}Controller) Create(ctx *gin.Context) {
    var req models.Create{{.StructName}}Request
    if err := ctx.ShouldBindJSON(&req); err != nil {
        ctx.JSON(http.StatusBadRequest, ErrorResponse{Error: err.Error()})
        return
    }

    item, err := c.{{.StructName}}Service.Create(&req)
    if err != nil {
        ctx.JSON(http.StatusInternalServerError, ErrorResponse{Error: "Failed to create item: " + err.Error()})
        return
    }

    ctx.JSON(http.StatusCreated, item.ToResponse())
}

// Get method
func (c *{{.StructName}}Controller) Get(ctx *gin.Context) {
    id, err := strconv.ParseUint(ctx.Param("id"), 10, 32)
    if err != nil {
        ctx.JSON(http.StatusBadRequest, ErrorResponse{Error: "Invalid ID format"})
        return
    }

    item, err := c.{{.StructName}}Service.GetByID(uint(id))
    if err != nil {
        ctx.JSON(http.StatusNotFound, ErrorResponse{Error: "Item not found"})
        return
    }

    ctx.JSON(http.StatusOK, item.ToResponse())
}

// List method (Paginated)
func (c *{{.StructName}}Controller) List(ctx *gin.Context) {
    page := 1
    limit := 10

    if p, err := strconv.Atoi(ctx.DefaultQuery("page", "1")); err == nil && p > 0 {
        page = p
    } else if err != nil {
        ctx.JSON(http.StatusBadRequest, ErrorResponse{Error: "Invalid 'page' parameter"})
        return
    }

    if l, err := strconv.Atoi(ctx.DefaultQuery("limit", "10")); err == nil && l > 0 && l <= 100 {
        limit = l
    } else if err != nil {
        ctx.JSON(http.StatusBadRequest, ErrorResponse{Error: "Invalid 'limit' parameter"})
        return
    }

    paginatedResponse, err := c.{{.StructName}}Service.GetAll(&page, &limit)
    if err != nil {
        ctx.JSON(http.StatusInternalServerError, ErrorResponse{Error: "Failed to fetch items: " + err.Error()})
        return
    }

    ctx.JSON(http.StatusOK, paginatedResponse)
}

// ListAll method (Unpaginated)
func (c *{{.StructName}}Controller) ListAll(ctx *gin.Context) {
    paginatedResponse, err := c.{{.StructName}}Service.GetAll(nil, nil)
    if err != nil {
        ctx.JSON(http.StatusInternalServerError, ErrorResponse{Error: "Failed to fetch all items: " + err.Error()})
        return
    }

    ctx.JSON(http.StatusOK, paginatedResponse)
}

// Update method
func (c *{{.StructName}}Controller) Update(ctx *gin.Context) {
    id, err := strconv.ParseUint(ctx.Param("id"), 10, 32)
    if err != nil {
        ctx.JSON(http.StatusBadRequest, ErrorResponse{Error: "Invalid ID format"})
        return
    }

    var req models.Update{{.StructName}}Request
    if err := ctx.ShouldBindJSON(&req); err != nil {
        ctx.JSON(http.StatusBadRequest, ErrorResponse{Error: err.Error()})
        return
    }

    item, err := c.{{.StructName}}Service.Update(uint(id), &req)
    if err != nil {
        ctx.JSON(http.StatusInternalServerError, ErrorResponse{Error: "Failed to update item: " + err.Error()})
        return
    }

    ctx.JSON(http.StatusOK, item.ToResponse())
}

// Delete method
func (c *{{.StructName}}Controller) Delete(ctx *gin.Context) {
    id, err := strconv.ParseUint(ctx.Param("id"), 10, 32)
    if err != nil {
        ctx.JSON(http.StatusBadRequest, ErrorResponse{Error: "Invalid ID format"})
        return
    }

    if err := c.{{.StructName}}Service.Delete(uint(id)); err != nil {
        ctx.JSON(http.StatusInternalServerError, ErrorResponse{Error: "Failed to delete item: " + err.Error()})
        return
    }

    ctx.JSON(http.StatusOK, SuccessResponse{Message: "Item deleted successfully"})
}

{{- range .Fields}}
{{- if or (eq .Relationship "has_many") (eq .Relationship "hasMany")}}
func (c *{{$.StructName}}Controller) GetAssociated{{.Name}}(ctx *gin.Context) {
    id, err := strconv.ParseUint(ctx.Param("id"), 10, 32)
    if err != nil {
        ctx.JSON(http.StatusBadRequest, ErrorResponse{Error: "Invalid ID format"})
        return
    }

    associated, err := c.{{$.StructName}}Service.GetAssociated(uint(id), "{{.Name}}")
    if err != nil {
        ctx.JSON(http.StatusInternalServerError, ErrorResponse{Error: "Failed to fetch associated {{.Name}}: " + err.Error()})
        return
    }

    ctx.JSON(http.StatusOK, associated)
}
{{- end}}

{{- if or (eq .Relationship "has_one") (eq .Relationship "hasOne")}}
func (c *{{$.StructName}}Controller) GetAssociated{{.Name}}(ctx *gin.Context) {
    id, err := strconv.ParseUint(ctx.Param("id"), 10, 32)
    if err != nil {
        ctx.JSON(http.StatusBadRequest, ErrorResponse{Error: "Invalid ID format"})
        return
    }

    associated, err := c.{{$.StructName}}Service.GetAssociated(uint(id), "{{.Name}}")
    if err != nil {
        ctx.JSON(http.StatusInternalServerError, ErrorResponse{Error: "Failed to fetch associated {{.Name}}: " + err.Error()})
        return
    }

    ctx.JSON(http.StatusOK, associated)
}
{{- end}}
{{- end}}

type ErrorResponse struct {
	Error string `json:"error"`
}

type SuccessResponse struct {
	Message string `json:"message"`
}
