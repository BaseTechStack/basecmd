package {{.PackageName}}

import (
    "net/http"
    "strconv"

    "github.com/gin-gonic/gin"
    "base/app/models"
    "base/core/storage"
)

type {{.StructName}}Controller struct {
    {{.StructName}}Service *{{.StructName}}Service
    activeStorage *storage.ActiveStorage
}

func New{{.StructName}}Controller(service *{{.StructName}}Service, activeStorage *storage.ActiveStorage) *{{.StructName}}Controller {
    return &{{.StructName}}Controller{
        {{.StructName}}Service: service,
        activeStorage: activeStorage,
    }
}

func (c *{{.StructName}}Controller) Routes(router *gin.RouterGroup) {
    router.GET("/{{toLower .PluralName}}", c.List)       // Paginated list
    router.GET("/{{toLower .PluralName}}/all", c.ListAll) // Unpaginated list
    router.GET("/{{toLower .PluralName}}/:id", c.Get)
    router.POST("/{{toLower .PluralName}}", c.Create)
    router.PUT("/{{toLower .PluralName}}/:id", c.Update)
    router.DELETE("/{{toLower .PluralName}}/:id", c.Delete)
    {{- range .Fields}}
    {{- if eq .Relationship "attachment"}}
    router.PUT("/{{toLower $.PluralName}}/:id/{{toLower .Name}}", c.Upload{{.Name}})
    {{- end}}
    {{- end}}
}

// Create{{.StructName}} godoc
// @Summary Create a new {{.StructName}}
// @Description Create a new {{.StructName}} with the input payload
// @Tags {{.StructName}}
// @Security ApiKeyAuth
// @Accept json
// @Produce json
// @Param {{toLower .PluralName}} body models.Create{{.StructName}}Request true "Create {{.StructName}} request"
// @Success 201 {object} models.{{.StructName}}Response
// @Failure 400 {object} ErrorResponse
// @Failure 500 {object} ErrorResponse
// @Router /{{toLower .PluralName}} [post]
func (c *{{.StructName}}Controller) Create(ctx *gin.Context) {
    var req models.Create{{.StructName}}Request
    if err := ctx.ShouldBindJSON(&req); err != nil {
        ctx.JSON(http.StatusBadRequest, ErrorResponse{Error: err.Error()})
        return
    }

    item, err := c.{{.StructName}}Service.Create(&req)
    if err != nil {
        ctx.JSON(http.StatusInternalServerError, ErrorResponse{Error: "Failed to create item: " + err.Error()})
        return
    }

    ctx.JSON(http.StatusCreated, item.ToResponse())
}

// Get{{.StructName}} godoc
// @Summary Get a {{.StructName}}
// @Description Get a {{.StructName}} by its id
// @Tags {{.StructName}}
// @Security ApiKeyAuth
// @Accept json
// @Produce json
// @Param id path int true "{{.StructName}} id"
// @Success 200 {object} models.{{.StructName}}Response
// @Failure 400 {object} ErrorResponse
// @Failure 404 {object} ErrorResponse
// @Router /{{toLower .PluralName}}/{id} [get]
func (c *{{.StructName}}Controller) Get(ctx *gin.Context) {
    id, err := strconv.ParseUint(ctx.Param("id"), 10, 32)
    if err != nil {
        ctx.JSON(http.StatusBadRequest, ErrorResponse{Error: "Invalid id format"})
        return
    }

    item, err := c.{{.StructName}}Service.GetById(uint(id))
    if err != nil {
        ctx.JSON(http.StatusNotFound, ErrorResponse{Error: "Item not found"})
        return
    }

    ctx.JSON(http.StatusOK, item.ToResponse())
}

// List{{.PluralName}} godoc
// @Summary List {{toLower .PluralName}}
// @Description Get a list of {{toLower .PluralName}}
// @Tags {{.StructName}}
// @Security ApiKeyAuth
// @Accept json
// @Produce json
// @Param page query int false "Page number"
// @Param limit query int false "Number of items per page"
// @Success 200 {object} types.PaginatedResponse
// @Failure 400 {object} ErrorResponse
// @Failure 500 {object} ErrorResponse
// @Router /{{toLower .PluralName}} [get]
func (c *{{.StructName}}Controller) List(ctx *gin.Context) {
    var page, limit *int

    if pageStr := ctx.Query("page"); pageStr != "" {
        if pageNum, err := strconv.Atoi(pageStr); err == nil && pageNum > 0 {
            page = &pageNum
        } else {
            ctx.JSON(http.StatusBadRequest, ErrorResponse{Error: "Invalid page number"})
            return
        }
    }

    if limitStr := ctx.Query("limit"); limitStr != "" {
        if limitNum, err := strconv.Atoi(limitStr); err == nil && limitNum > 0 {
            limit = &limitNum
        } else {
            ctx.JSON(http.StatusBadRequest, ErrorResponse{Error: "Invalid limit number"})
            return
        }
    }

    paginatedResponse, err := c.{{.StructName}}Service.GetAll(page, limit)
    if err != nil {
        ctx.JSON(http.StatusInternalServerError, ErrorResponse{Error: "Failed to fetch items: " + err.Error()})
        return
    }

    ctx.JSON(http.StatusOK, paginatedResponse)
}

// ListAll{{.PluralName}} godoc
// @Summary List all {{toLower .PluralName}} without pagination
// @Description Get a list of all {{toLower .PluralName}} without pagination
// @Tags {{.StructName}}
// @Security ApiKeyAuth
// @Accept json
// @Produce json
// @Success 200 {object} types.PaginatedResponse
// @Failure 500 {object} ErrorResponse
// @Router /{{toLower .PluralName}}/all [get]
func (c *{{.StructName}}Controller) ListAll(ctx *gin.Context) {
    paginatedResponse, err := c.{{.StructName}}Service.GetAll(nil, nil)
    if err != nil {
        ctx.JSON(http.StatusInternalServerError, ErrorResponse{Error: "Failed to fetch all items: " + err.Error()})
        return
    }

    ctx.JSON(http.StatusOK, paginatedResponse)
}

// Update{{.StructName}} godoc
// @Summary Update a {{.StructName}}
// @Description Update a {{.StructName}} by its id
// @Tags {{.StructName}}
// @Security ApiKeyAuth
// @Accept json
// @Produce json
// @Param id path int true "{{.StructName}} id"
// @Param {{toLower .PluralName}} body models.Update{{.StructName}}Request true "Update {{.StructName}} request"
// @Success 200 {object} models.{{.StructName}}Response
// @Failure 400 {object} ErrorResponse
// @Failure 404 {object} ErrorResponse
// @Failure 500 {object} ErrorResponse
// @Router /{{toLower .PluralName}}/{id} [put]
func (c *{{.StructName}}Controller) Update(ctx *gin.Context) {
    id, err := strconv.ParseUint(ctx.Param("id"), 10, 32)
    if err != nil {
        ctx.JSON(http.StatusBadRequest, ErrorResponse{Error: "Invalid id format"})
        return
    }

    var req models.Update{{.StructName}}Request
    if err := ctx.ShouldBindJSON(&req); err != nil {
        ctx.JSON(http.StatusBadRequest, ErrorResponse{Error: err.Error()})
        return
    }

    item, err := c.{{.StructName}}Service.Update(uint(id), &req)
    if err != nil {
        ctx.JSON(http.StatusInternalServerError, ErrorResponse{Error: "Failed to update item: " + err.Error()})
        return
    }

    ctx.JSON(http.StatusOK, item.ToResponse())
}

// Delete{{.StructName}} godoc
// @Summary Delete a {{.StructName}}
// @Description Delete a {{.StructName}} by its id
// @Tags {{.StructName}}
// @Security ApiKeyAuth
// @Accept json
// @Produce json
// @Param id path int true "{{.StructName}} id"
// @Success 200 {object} SuccessResponse
// @Failure 400 {object} ErrorResponse
// @Failure 500 {object} ErrorResponse
// @Router /{{toLower .PluralName}}/{id} [delete]
func (c *{{.StructName}}Controller) Delete(ctx *gin.Context) {
    id, err := strconv.ParseUint(ctx.Param("id"), 10, 32)
    if err != nil {
        ctx.JSON(http.StatusBadRequest, ErrorResponse{Error: "Invalid id format"})
        return
    }

    if err := c.{{.StructName}}Service.Delete(uint(id)); err != nil {
        ctx.JSON(http.StatusInternalServerError, ErrorResponse{Error: "Failed to delete item: " + err.Error()})
        return
    }

    ctx.JSON(http.StatusOK, SuccessResponse{Message: "Item deleted successfully"})
}

{{- range .Fields}}
{{- if eq .Relationship "attachment"}}

// Upload{{.Name}} godoc
// @Summary Upload {{.Name}} for a {{$.StructName}}
// @Description Upload or update the {{.Name}} of a {{$.StructName}}
// @Tags {{$.StructName}}
// @Security ApiKeyAuth
// @Accept multipart/form-data
// @Produce json
// @Param id path int true "{{$.StructName}} id"
// @Param file formData file true "File to upload"
// @Success 200 {object} models.{{$.StructName}}Response
// @Failure 400 {object} ErrorResponse
// @Failure 404 {object} ErrorResponse
// @Failure 500 {object} ErrorResponse
// @Router /{{toLower $.PluralName}}/{id}/{{toLower .Name}} [put]
func (c *{{$.StructName}}Controller) Upload{{.Name}}(ctx *gin.Context) {
    id, err := strconv.ParseUint(ctx.Param("id"), 10, 32)
    if err != nil {
        ctx.JSON(http.StatusBadRequest, ErrorResponse{Error: "Invalid id format"})
        return
    }

    file, err := ctx.FormFile("file")
    if err != nil {
        ctx.JSON(http.StatusBadRequest, ErrorResponse{Error: "No file uploaded"})
        return
    }

    // Get the item first
    item, err := c.{{$.StructName}}Service.GetById(uint(id))
    if err != nil {
        ctx.JSON(http.StatusNotFound, ErrorResponse{Error: "Item not found"})
        return
    }

    // Upload the file using storage service
    attachment, err := c.activeStorage.Attach(item, "{{toLower .Name}}", file)
    if err != nil {
        ctx.JSON(http.StatusInternalServerError, ErrorResponse{Error: "Failed to upload file: " + err.Error()})
        return
    }

    // Update the item with the new attachment
    var attachmentId = attachment.Id
    var ptrAttachmentId = &attachmentId
    updateReq := &models.Update{{$.StructName}}Request{
        {{.Name}}Id: &ptrAttachmentId,
    }

    updatedItem, err := c.{{$.StructName}}Service.Update(uint(id), updateReq)
    if err != nil {
        ctx.JSON(http.StatusInternalServerError, ErrorResponse{Error: "Failed to update item: " + err.Error()})
        return
    }

    ctx.JSON(http.StatusOK, updatedItem.ToResponse())
}
{{- end}}
{{- end}}

type ErrorResponse struct {
    Error string `json:"error"`
}

type SuccessResponse struct {
    Message string `json:"message"`
}
